#+title: Stories written using clif
#+author: @fernan2rodriguez
#+date: 2024-10-28

* description
This file will contain stories written in clif and exported to undum.
The src blocks will be tangled to =src/stories.lisp=.


* first story (2024-10-28)

** create a list with the situations
First, we create a list with variables that will hold the situations.
This is probably a bad practice, but it should suffice for today.
   #+begin_src lisp :results output :export code
   (defparameter start nil)
   (defparameter inside-the-house nil)
   (defparameter good-ending nil)
   (defparameter bad-ending nil)
   (defparameter story nil)
   #+end_src

   #+RESULTS:

** add the situations
   #+begin_src lisp :results none :export code
     (setf start (basic-situation
		  "start"
		  (h1 "In the beginning...")
		  (nline)
		  (p "You are at the front door of a house. It is closed")
		  (nline)
		  (p "Do you " (link "inside_the_house" "open the door?")
		     " Or do you " (link "bad_ending"  "turn your back and leave?"))))

     (setf bad-ending (basic-situation
		       "bad_ending"
		       (p "You leave and will never know what you could have become.")
		       (nline)
		       (p "THE (BAD) END")))

     (setf inside-the-house
	   (basic-situation
	    "inside_the_house"
	    (p "Decided to face your demons, you open the door and enter.")
	    (nline)
	    (p "What you see surprises you! :-o")
	    (nline)
	    (p "THE (SURPRISING) END")))
   #+end_src
   
** create the story
   #+begin_src lisp :results none :export code 
   (setf story (story (list start inside-the-house bad-ending)
                      "start"))
   #+end_src

** generate the file
   #+begin_src lisp :results none :export code 
   (with-open-file (f "/tmp/undum-game.js" :direction :output
                     :if-exists :supersede)
      (generate-code story undum f))
   #+end_src


* second story (2025-05-05
, with marian)
** crear las variables con las situaciones
Siguiendo el tutorial anterior, primero definimos variables con los nombres de las situaciones.

   #+begin_src lisp :results none :export code 
   (progn
     (defparameter start2 nil)
     (defparameter before-lisp nil)
     (defparameter inside-lisp nil)
     (defparameter ending-without-lisp nil)
     (defparameter story2 nil))
   #+end_src

** crear las situaciones
*** start2
   #+begin_src lisp :results none :export code
   (setf start2 (basic-situation
                 "start2"
                 (h1 "Había una vez...")
                 (nline)
                 (p "una PUÑETERA niña :-| que se llamaba Nairam, y no le gustaba Emacs ni el modo org , y por eso, todo lo hacía directo en Lisp *panic noises*. Y un día, decidió tomar una decisión:")

                 (nline)
                 (p (link "beforelisp" "Hoy aprendería Emacs")
                    ", o quizás " (link "ending-without-lisp" "cambiaba de tesis."))))
   #+end_src

*** before-lisp
   #+begin_src lisp :results none :export code 
   (setf before-lisp
         (basic-situation "beforelisp"
          (p "Para aprender Emacs, lo primero que hizo fue: ")
          (nline)
          (p (link "insidelisp"
                   "Preguntarle a chatgpt y le dijo que hiciera el tutorial de emacs"))
          (p (link "endingwithoutlisp" 
                   "Buscar un libro serio sobre lisp."))))
   #+end_src

*** inside-lisp
   #+begin_src lisp :results none :export code 
   (setf inside-lisp
         (basic-situation "insidelisp"
          (p "Después de leer el tutorial se dio cuenta de que eso no servía para nada y se deprimió.")
          (nline)
          (p "The (VERY DEPRESSING) END.")))
   #+end_src
** crear una lista con la historia
   #+begin_src lisp :results none :export code 
   (setf story2 (story (list start2 before-lisp inside-lisp) "start2"))
   #+end_src

** generar el fichero
   #+begin_src lisp :results none :export code
   (with-open-file (f "/tmp/undum-game.js" :direction :output
                     :if-exists :supersede)
      (generate-code story2 undum f))
   #+end_src


* third story (2025-05-05, with macros)   
** crear las variables con las situaciones (NOT IN MY WATCH)
Siguiendo el tutorial anterior, primero definimos variables con los nombres de las situaciones.

Ya esto no hace falta porque el macro se encarga de eso :proud_face:.

** crear las situaciones (usando el macro)
*** start3
   #+begin_src lisp :results none :export code 
     (defbasic-situation start-3
       (h1 "Había una vez un niño que hacía historias con clif...")
	  (nline)
       (p (link "usa_macros" "usando macros."))

       (p (link "sin_usar_macros" "sin usar macros.") "Y " (br)  " SALTAAAAA")

       (ul (li "item 1") (li "item2") )
       (ol (li "First element") (li "Second element"))

       (p "Mientras decía: el último teorema de fermat dice...  ")

       (nline)

       (show-whiteboard "Math Lesson" "2+2=")
      (add-to-whiteboard "4")
      (button 'add_to_whiteboard "clic para saber que gritó")
      (clear-whiteboard)
      (button 'clear_whiteboard "clic to erase the  whiteboard")
     )
   #+end_src
*** usando-macros
   #+begin_src lisp :results none :export code 
   (defbasic-situation usa_macros
     (p "Y vivió feliz para siempre :-D.")
     (p "FIN"))
   #+end_src
*** sin-usar-macros
   #+begin_src lisp :results none :export code 
     ;; (defbasic-situation sin_usar_macros
     ;;   (p "Y vino el lobo y le dijo: te explico:")

     ;;   (br)

     ;;  (show-whiteboard "Y sacó una pizarra."))
   #+end_src
*** la pizarra
   #+begin_src lisp :results none :export code 
     ;; (defbasic-situation escribir_en_pizarra
     ;;      (p "Mientras decía: el último teorema de fermat dice...  ")

     ;;      (add-to-whiteboard "x**n+ y**n = z**n"
     ;;                         "el lobo escribía en la pizarra.")


     ;;      (p "Moraleja: usa macros.")

     ;;      (p "FIN"))
   #+end_src
** tareas pendientes
*** DONE macro para defstory
La idea es que funcione así:

   #+begin_src lisp :results none :export code 
     ;; (defstory historia-de-los-macros
     ;;     :initial-situation start3
     ;;     :situations (start3
     ;;                  ohhhh
     ;;                  ouh-yeah
     ;;                  i-did-it
     ;;                  oh-no!!!!
     ;;                  the-happy-end
     ;;                  the-sad-end
     ;;                  the-unwritten-end))
   #+end_src

*** DONE add br class
*** DONE add ul, li, ol
*** DONE replace - with _ in situation's name
*** TODO comandos para la pizarra
**** add-to-whiteboard
**** show-whiteboard
**** clear-whiteboard
**** delete-from-whiteboard
**** hide-whiteboard
** crear una lista con la historia
   #+begin_src lisp :results none :export code 
   (defstory story3
        :initial-situation start-3
        :situations (start-3 usa_macros))
   #+end_src

** generar el fichero
   #+begin_src lisp :results none :export code 
   (with-open-file (f "/tmp/undum-game.js" :direction :output
                     :if-exists :supersede)
      (generate-code story3 undum f))
   #+end_src

   
   
* fourth story (2025-06-25, html export)
** create scenes
#+begin_src lisp :results none :export code :tangle src/stories.lisp
      (scene introduction
	  (change-bg-color "blue")
	 (change-bg-image "/home/marian/Pictures/logoMatcom1.png")
	  (title "Welcome to the Adventure")
	 

	  (text (tt "You see two paths before you:"))
	  (math-center "\\sum_{i=1}^n i^2 = \\frac{n(n+1)(2n+1)}{6}")

	 (whiteboard "Quick Notes" "whatever"
  (text "prueba"))

  (newline)
  (code-node "python"
  "def hello_world():
      print(\"Hello, world!\")")
  (newline)
  (code-node "lisp"
  "(format nil \"(defun factorial (n)~%  (if (<= n 1)~%      1~%      (* n (factorial (1- n)))))\")")

    (newline)

	  (action test-action "clic here" cambio-id "CAMBIO")
     (newline)
	  (image "/home/marian/Pictures/firma.jpg"
		 "Company Logo"
		 :align :right
		 :size 20)
     (newline)
	 (start-sound "/home/marian/Music/rain.mp3")
     (newline)
     (video "/home/marian/Videos/Screencasts/tutorial.webm" :alt-text "Instructional video")

	  (enumerate (item (link forest "Take the forest path"))
		     (item (link cave "Enter the dark cave"))))
     t
     (scene forest
	  (title "The Enchanted Forest")
	  (text (b "You enter a lush green forest."))
	  (text (it "The trees whisper secrets as you walk by."))
	  (link introduction "Go back to the starting point"))

     (scene cave
	  (title "The Dark Cave")
	  (text (strike "You step into the cold, damp cave."))
	  (text (underline "Your footsteps echo in the darkness."))
	  (link introduction "Retreat to safety"))
#+end_src

** create the story
#+begin_src lisp :results none :export code :tangle src/stories.lisp
(story my-story 
       (:author "Marian S." 
        :story-title "A Simple Adventure" 
        :start introduction)
       introduction
       forest
       cave)
#+end_src

** generate html files
#+begin_src lisp :results none :export code :tangle src/stories.lisp
(generate-code my-story html "/home/marian/Documents/MATCOM/Tesis/clif/stories_file/")  
  #+end_src
  
** generate latex files
#+begin_src lisp :results output :export code :tangle src/stories.lisp
(generate-code my-story latex "/home/marian/Documents/MATCOM/Tesis/latex/")
#+end_src


* fifth story (2025-06-30)
** create scenes
#+begin_src lisp :results none :export code :tangle src/stories.lisp
  (scene intro
   (title "Introducción al problema de mínimos cuadrados")
   (change-bg-image "/home/marian/Documents/MATCOM/Tesis/historias/fade.png")
   (text (b "Bienvenido a esta lección interactiva para resolver el problema de mínimos cuadrados"))
   (text "Primero vamos a cargar las librerías necesarias:")

   (code-node "python"
   "import numpy as np
  import scipy as sp
  import scipy.optimize as spo
  import matplotlib.pyplot as plt")

   (text "Lo segundo es crear los datos" (math-inline "(x_i, y_i)"))

   (code-node "python" 
   "xdata = [1, 2, 3]
  ydata = [2, 3, 4]")

   (link plotting "Haz clic aquí para graficar esos puntos."))

  (scene plotting
   (title "Visualización de los datos")
   (text "Here's a plot of our data points:")

   (image "/home/marian/Documents/MATCOM/Tesis/historias/plot1.png" "Ejemplos de puntos" :align :center)

   (text "Perfecto.  Ahora definimos una función parámetrica, que depende de la x y de un conjunto de parámetros.  En este caso vamos a definir una recta:
  ")

  (whiteboard "Ecuación de la recta" "Fernando"  (math-center "f(x,p) = p_1 x + p_2") )

  (text "En python, eso lo podemos hacer con una función que depende de dos variables:")

   (code-node "python"
   "def fp(x, p):
      return x*p[0] + p[1]"))
#+end_src

** create story
#+begin_src lisp :results none :export code :tangle src/stories.lisp
(story least-squares-story
       (:author "Data Science Team"
        :story-title "Solving Least Squares Problems"
        :start intro)
       intro
       plotting)
#+end_src

** generate code to latex and html
#+begin_src lisp :results none :export code :tangle src/stories.lisp
(generate-code least-squares-story html "/home/marian/Documents/MATCOM/Tesis/historias/")
(generate-code least-squares-story latex "/home/marian/Documents/MATCOM/Tesis/historias/")
#+end_src


* sixth story (2025-06-30)
#+begin_src lisp :results none :export code :tangle src/stories.lisp
  (scene inicio
   (change-bg-image "/home/marian/Documents/MATCOM/Tesis/historias/nueva/bg.jpg")
   (title "Aventura en el Bosque Encantado")

   (start-sound "/home/marian/sound/birds.mp3" :alt-text "Se escuchan pájaros en la distancia")
  


   (text (b "¡Bienvenido a una aventura interactiva!"))
   (text "Estás parado en el borde de un misterioso bosque. El viento susurra entre los árboles...")

   (text "Opciones disponibles:")
   (enumerate 
     (item (link explorar "Explorar el bosque"))
     (item (item (action recoger-flor "Recoger una flor brillante" next-scene "flor")))
     (item (item (text (it "Observar los alrededores")))))

   (text "Recuerda estas reglas importantes:")
   (enumerate 
     (item "No hables con extraños")
     (item "Lleva siempre agua")
     (item "Regresa antes del anochecer"))

   (newline)
   (text "¿Qué deseas hacer?"))

  (scene explorar
   (title "Explorando el Bosque")
   (text "Has decidido adentrarte en el bosque. Los rayos de sol filtran entre las hojas.")

   (text (b "Encuentras tres senderos:"))
   (enumerate
     (item (link sendero-izq "Sendero izquierdo - conduce a un arroyo"))
     (item (item (action investigar-ruido "Investigar ruido misterioso" next-scene "ruido")))
     (item (link inicio "Volver al punto inicial")))

   (whiteboard "¿Será cierto que..." "K. Manzano"   (math-center "\\sum_{i=1}^n i^2 = \\frac{n(n+1)(2n+1)}{6}"))
   (text (underline "Escuchas pájaros cantando en la distancia.")))

  ;; (scene flor
  ;;  (title "La Flor Mágica")
  ;;  (change-bg-color "#ffe6f3")
  ;;  (image "/path/to/flower.jpg" "Flor brillante" :size 30 :align :right)

  ;;  (text "Has encontrado una flor que brilla con luz propia!")
  ;;  (text "Opciones disponibles:")
  ;;  (enumerate
  ;;    (item (action oler-flor "Oler la flor" next-scene "olor"))
  ;;    (item (link guardar-flor "Guardarla en tu mochila"))
  ;;    (item (link inicio "Dejarla y regresar"))))

  ;; (scene olor
  ;;  (title "El Aroma Mágico")
  ;;  (text "Al acercarte a oler la flor, un dulce aroma te envuelve...")
  ;;  (text (strike "De repente, todo a tu alrededor comienza a cambiar!"))

  ;;  (text "¿Qué haces?")
  ;;  (enumerate
  ;;    (item (action cerrar-ojos "Cerrar los ojos rápidamente" next-scene "vision"))
  ;;    (item (link correr "Correr de regreso al camino"))
  ;;    (item (text "Quedarte quieto y observar"))))

  ;; (scene vision
  ;;  (title "Una Nueva Visión")
  ;;  (text "Al abrir los ojos, ves el bosque con nuevos colores que nunca antes habías percibido!")

  ;;  (text "Ahora puedes:")
  ;;  (enumerate
  ;;    (item (link hablar-arboles "Hablar con los árboles"))
  ;;    (item (item (action volver-normal "Intentar volver a la normalidad" next-scene "inicio")))
  ;;    (item (text "Explorar tus nuevos poderes")))

  ;;  (text (b "¡Felicidades! Has descubierto la magia del bosque."))
  ;;  (link inicio "Volver al comienzo de la historia"))
#+end_src
** create story
#+begin_src lisp :results none :export code :tangle src/stories.lisp
(story aventura-bosque
       (:author "Storyteller Inc."
        :story-title "El Bosque Encantado" 
        :start inicio)
       inicio
       explorar)
#+end_src
** generate code
#+begin_src lisp :results none :export code :tangle src/stories.lisp
(generate-code aventura-bosque html "/home/marian/Documents/MATCOM/Tesis/historias/nueva/")
(generate-code aventura-bosque latex "/home/marian/Documents/MATCOM/Tesis/historias/nueva/")
#+end_src
